<div class="docs-container">
  <hr class="primary-line" />
  <section id="auth">
    <h2 class="title-section">Autenticación y Autorización</h2>
    <p>
      La sección de <b>Autenticación y Autorización</b> se compone de rutas cuya
      finalidad es crear nuevos usuario a través de un registro, generar token
      de acceso a través de un inicio de sesión, y validación y autorización del
      token obtenido. Para utilizar estas rutas es necesario disponer de una
      <a href="/">Api-Key</a>.
    </p>

    <hr class="secondary-line">

    <section id="auth-auth">
      <h3 class="subtitle-section">Autorización de Usuario</h3>
      <h4><span class="post">POST</span> - <span class="route">/api/auth</span></h4>
      <p>Recibe el token generado en el <a href="#auth-login">Inicio de Sesión</a>, verifica su autenticidad y lo autoriza. Esta ruta se emplea para verificar sesiones de usuarios en el cliente.</p>

      <h4>Configuración de Petición</h4>      
<pre><code class="language-json"><%= `{
  "headers": {
    "X-Authorization-Token": "\<--Token-de-Sesión-->",
    "X-Authorization-Api-Key": "\<--Api-Key-->"
  }
}` %></code></pre>

    <h4><span class="status-200">200 - OK</span></h4>
<pre><code class="language-json"><%= `{
  "msg": "El usuario está autorizado"
}` %></code></pre>

    <h4><span class="status-400">401 - UNAUTHORIZED</span></h4>
<pre><code class="language-json"><%= `{
  "status": 401,
  "errors": [
    "El token proporcionado es inválido"
  ]
}` %></code></pre>
    </section>

    <hr class="secondary-line">

    <section id="auth-register">
      <h3 class="subtitle-section">Registro de Usuario</h3>
      <h4><span class="post">POST</span> - <span class="route">/api/auth/register</span></h4>
      <p>Crea un nuevo usuario y lo añade a la base de datos. En caso de que ya exista el usuario, pero esté inactivo, lo vuelve a establecer su estado en activo. Además de la Api-Key, esta ruta también debe recibir un body con el e-mail, contraseña y, opcionalmente, una propiedad donde se podrá añadir datos extras.</p>

      <h4>Configuración de Petición</h4>      
<pre><code class="language-json"><%= `{
  "headers": {
    "X-Authorization-Api-Key": "\<--Api-Key-->"
  },
  "body": {
    "email": "\<-- E-mail del usuario con un formato válido -->",
    "password": "\<-- Contraseña del usuario con un formato válido -->",
    "data": "\<-- Propiedad opcional donde se podrá anadir un array u objeto con más información del usuario -->"
  }
}` %></code></pre>

    <h4><span class="status-200">201 - CREATED</span></h4>
<pre><code class="language-json"><%= `{
  "msg": "Usuario creado exitosamente",
  "user": {
    "email": "ejemplo@email.com",
    "status": "active",
    "register_date": "2023-09-30T01:21:40.673Z",
    "_id": "651786685930b05d64eb0d21"
  }
}` %></code></pre>

    <h4><span class="status-400">400 - BAD REQUEST</span></h4>
<pre><code class="language-json"><%= `{
  "status": 400,
  "errors": [
    "El e-mail ingresado no tiene un formato válido",
    "La contraseña debe tener letras, números y un mínimo de 8 caracteres"
  ]
}` %></code></pre>
<pre><code class="language-json"><%= `{
  "status": 400,
  "errors": [
    "Los datos del e-mail son necesarios",
    "Los datos de la contraseña son necesarios"
  ]
}` %></code></pre>
    </section>

    <hr class="secondary-line">

    <section id="auth-login">
      <h3 class="subtitle-section">Inicio de Sesión de Usuario</h3>
      <h4><span class="post">POST</span> - <span class="route">/api/auth/login</span></h4>
      <p>Genera un token de sesión para el usuario luego de verificar sus datos de e-mail y contraseña. En caso de que el usuario esté inactivo no generará el token. Además de la Api-Key, esta ruta también debe recibir un body con el e-mail y contraseña.</p>

      <h4>Configuración de Petición</h4>      
<pre><code class="language-json"><%= `{
  "headers": {
    "X-Authorization-Api-Key": "\<--Api-Key-->"
  },
  "body": {
    "email": "\<-- E-mail del usuario con un formato válido -->",
    "password": "\<-- Contraseña del usuario con un formato válido -->"
  }
}` %></code></pre>

    <h4><span class="status-200">201 - CREATED</span></h4>
<pre><code class="language-json"><%= `{
  "msg": "Inicio de sesión exitoso",
  "token": "\<-- Token generado -->"
}` %></code></pre>

    <h4><span class="status-400">400 - BAD REQUEST</span></h4>
<pre><code class="language-json"><%= `{
  "status": 400,
  "errors": [
    "El e-mail ingresado no tiene un formato válido",
    "La contraseña debe tener letras, números y un mínimo de 8 caracteres"
  ]
}` %></code></pre>
<pre><code class="language-json"><%= `{
  "status": 400,
  "errors": [
    "Los datos del e-mail son necesarios",
    "Los datos de la contraseña son necesarios"
  ]
}` %></code></pre>
    <h4><span class="status-400">403 - FORBIDDEN</span></h4>
<pre><code class="language-json"><%= `{
  "status": 403,
  "errors": [
    "La cuenta vinculada al e-mail 'ejemplo@email.com' está inactiva"
  ]
}` %></code></pre>
    </section>
  </section>

  <hr class="primary-line" />

  <section id="user">
    <h2 class="title-section">Datos de Usuario</h2>
    <p>
      La sección de <b>Datos</b> se compone de rutas cuya
      finalidad es obtener, modificar y eliminar usuarios registrados. Para utilizar estas rutas es necesario disponer de una <a href="/">Api-Key</a> y un <a href="#auth-login">Token</a> (en la mayoría de los casos).
    </p>

    <hr class="secondary-line">

    <section id="user-user">
      <h3 class="subtitle-section">Obtener Usuario</h3>
      <h4><span class="get">GET</span> - <span class="route">/api/user/:id</span></h4>
      <p>Obtiene los datos del usuario perteneciente al id proporcionado.</p>

      <h4>Configuración de Petición</h4>      
<pre><code class="language-json"><%= `{
  "headers": {
    "X-Authorization-Api-Key": "\<--Api-Key-->"
  },
  "params": {
    "id": "\<-- ID del usuario en formato BSON hexadecimal -->"
  }
}` %></code></pre>

    <h4><span class="status-200">200 - OK</span></h4>
<pre><code class="language-json"><%= `{
  "_id": "\<-- ID del usuario -->",
  "email": "\<-- E-mail del usuario-->",
  "status": "active",
  "register_date": "\<-- Fecha de registro -->",
  "data": "\<-- Información extra (en caso de contener) -->"
}` %></code></pre>

    <h4><span class="status-400">400 - BAD REQUEST</span></h4>
<pre><code class="language-json"><%= `{
  "status": 400,
  "errors": [
    "El usuario se encuentra inactivo"
  ]
}` %></code></pre>
    <h4><span class="status-400">404 - NOT FOUND</span></h4>
<pre><code class="language-json"><%= `{
  "status": 404,
  "errors": [
    "Usuario no encontrado"
  ]
}` %></code></pre>
    </section>

  </section>
</div>
